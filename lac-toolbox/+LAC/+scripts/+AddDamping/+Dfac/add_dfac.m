function n_dfac = add_dfac(prep_file, n_prep, delete_old, delete_INT, retain)

% add_dfac - Add blade damping (dfac) to DLC's defined by text file.
% This function adds dfac to DLC's if the DLC's are mentioned in the
% "dfac_application.txt" file generated by edgewise_vibration_detect.m.
% Damping is applied in a prescribed order of 20, 50, 100. I.e. if no
% damping is yet applied then 20 will be applied, if 20 is applied then 50
% will be applied and so on.
%
% Syntax:   add_dfac(prep_file, n_prep)
%
% Inputs:
%  prep_file   -  Full path to Prep Input text file name (make sure the simulation folder contains the prep files
%               .txt and dfac_application.txt file).
%  n_prep -     Number of prep files to be applied to (will be selected as
%               the n_prep largest files in the directory specified by
%               path).
%  delete_old - Delete old prep file flag. Set to 1 if you don't wan't to
%               retain old prep file and 0 if you wan't to.
%  delete_INT - Delete INT file(s) flag. Set to 1 if you wan't old INT
%               files for affected DLC's to be deleted (i.e. for re-running
%               the DLC's) and 0 if you wan't them to be retained.
%  retain -     retain old files flag. Set to 1 if you want to retain the
%               dfac_application file (i.e. move to _OLD folder) and the
%               dfac specification plots and 0 if you don't.
%
% Example: 
%    n_dfac = add_dfac('w:\3MW\Mk3E\Calculations\005_dfac_specification\V117_3.60_IEC1B(S)_HH91.5_VDS_AAO_OFFSHORE_drafttower_4b2d4f_60b53c\V117_3.60_IEC1B(S)_HH91.5_VDS_AAO_OFFSHORE_drafttower_4b2d4f_60b53c.txt', 1, 0, 1, 1)
%
% Other m-files required: none
% Subfunctions: none
% MAT-files required: none

% Author: MIFAK, Mike Fonnesbæk Jensen
% November 2016; Last revision: 14-July-2017

%% Set default values for input
[path,FileName,Ext] = fileparts(prep_file);      % separate the file name and simulation folder path
path = [path '\'];
FileName = [FileName Ext];
optargs = [1, 0, 1, 1];     % set of defaul settings
switch nargin               % switch on number of inputs
    case 1
        n_prep      = optargs(1);
        delete_old  = optargs(2);
        delete_INT  = optargs(3);
        retain      = optargs(4);
    case 2
        delete_old  = optargs(2);
        delete_INT  = optargs(3);
        retain      = optargs(4);
    case 3
        delete_INT  = optargs(3);
        retain      = optargs(4);
    case 4
        retain      = optargs(4);
end

%% Input
dfac = [20, 50, 100];       % dfac application order

%% Read DLC specifications
fid         = fopen([path, 'dfac_application.txt'], 'r');
                                                        % open dfac application text file
DLC         = textscan(fid, '%s\r\n');                  % read 
DLC         = DLC{1, 1};                                % store DLC list in cell array
fclose(fid);                                            % close dfac application text file
date_str    = datestr(now, 'yy_mm_dd_HH_MM_SS');        % get date in string to use as a unique identifier for renaming the original prep files and dfac_application.txt file
if retain                                               % check if old files should be retained
    folder  = ['_OLD_', date_str];                      % get folder name
   	mkdir(fullfile(path, folder));                      % create directory
    movefile(fullfile(path, 'dfac_application.txt'), fullfile(path, folder, 'dfac_application.txt'));
                                                        % move original dfac_application.txt file
    temp    = dir([path, 'max_FFT_DLC*.png']);        	% find all png images with max FFT values
    for i = 1:length(temp)                              % start looping on png files
        movefile(fullfile(path, temp(i).name), fullfile(path, folder, temp(i).name));
                                                        % move figure
    end
end
n_dfac      = length(DLC);                              % number of DLC's to be changed

%% Find files and sort by size
temp        = dir([path, '*.txt']);                     % get list of text files in path
for ii = 1:length(temp)                                 % start looping to find the prep input text file
    if strcmp(FileName, temp(ii).name)
        idx = ii;
    end
end

%% Read file(s) and add dfac
for i = 1:n_prep                                        % start looping on prep files to be changed

    % Move existing prep file if it shouldn't be deleted
    if ~delete_old
        if ~retain                                      % check if other files are retained
            folder  = ['_OLD_', date_str];              % get folder name and ...
            mkdir(fullfile(path, folder));              % create directory if they aren't
        end
        copyfile(fullfile(path, temp(idx(i)).name), fullfile(path, folder, temp(idx(i)).name));
                                                        % copy existing prep file
    end

    % Rename existing prep file
    movefile(fullfile(path, temp(idx(i)).name), fullfile(path, [temp(idx(i)).name(1:end-4), '.old']));
                                                        % rename the original prep file
    
    % Open old and new prep file
    fid_new = fopen(fullfile(path, temp(idx(i)).name), 'w');
                                                        % open (create) new prep file
    fid_old = fopen(fullfile(path, [temp(idx(i)).name(1:end-4), '.old']), 'r');
                                                        % open original prep file
    
    % Start copying from original prep file and add dfac where specified
    line1       = 0;                % initiate new line
    while ~feof(fid_old)            % loop until reaching end of input file
        line2   = line1;            % set old line to previous step new line
        line1   = fgetl(fid_old);   % get new line
        cond1 = or(strcmp('', line1) && strcmp('', line2),strcmp(' ', line1) && strcmp(' ', line2));   % check if both lines are empty or ' ' if generated with subset
        cond2 = or(strcmp('', line2),strcmp(' ', line2)) && DLC_in_list(line1, DLC);   % check if both lines are empty
        if cond1   % check if both lines are empty
            fprintf(fid_new, '\r\n');               % write new line to output file if they are
        elseif cond2
                                                    % check if old line is empty and first characters of new line is equal to the specified DLC number
            fprintf(fid_new, '%s\r\n', line1);      % write new line to output file
            line2   = fgetl(fid_old);               % get new line to old line placeholder
            fprintf(fid_new, '%s\r\n', line2);      % write line to output file
            line1   = fgetl(fid_old);               % get new line
            if isempty(strfind(line1, 'dfac'))      % check if dfac is not applied for this DLC
                fprintf(fid_new, '%s\r\n', [line1, sprintf(' dfac %d %d %d', dfac(1), dfac(1), dfac(1))]);
                                                  	% write line to output file with dfac added
            else                                    % if dfac is applied then
                j       = 0;                        % initiate iteration counter
                flag    = 1;                      	% initiate while loop exit flag
                while flag                        	% start looping until exit flag is set false
                    j   = j + 1;                  	% increment iteration counter
                    if j > length(dfac)           	% check if required dfac level exceeds predetermined list
                        error('No more levels of dfac available, check your model!')
                                                   	% throw error if it does
                    end
                    if ~isempty(strfind(line1, sprintf('dfac %d %d %d', dfac(j), dfac(j), dfac(j))))
                                                  	% check if the j'th dfac level is applied
                        flag        = 0;           	% set exit flag to false (i.e. exit next while loop)
                        str_len     = length(sprintf('dfac %d %d %d', dfac(j), dfac(j), dfac(j)))+1;
                                                   	% get length of dfac application string
                        idx_dfac    = strfind(line1, sprintf('dfac %d %d %d', dfac(j), dfac(j), dfac(j)))-1;
                                                    % find start index of old dfac command
                      	if idx_dfac+str_len > length(line1)
                                                    % check if dfac command is placed at the end of the line
                            fprintf(fid_new, '%s\r\n', [line1(1:idx_dfac), sprintf('dfac %d %d %d', dfac(j+1), dfac(j+1), dfac(j+1))]);
                                                  	% write line to output file with updated dfac levels
                        else
                            fprintf(fid_new, '%s\r\n', [line1(1:idx_dfac), sprintf('dfac %d %d %d', dfac(j+1), dfac(j+1), dfac(j+1)), line1(idx_dfac+str_len:end)]);
                                                   	% write line to output file with updated dfac levels
                        end
                    end
                end
            end
        else
            fprintf(fid_new, '%s\r\n', line1);      % simply write new line to file if any other case
        end
    end
    fclose(fid_new);    % close new prep file
    fclose(fid_old);    % close original prep file
   	delete(fullfile(path, [temp(idx(i)).name(1:end-4), '.old']))
                        % delete original prep file
end

%% Delete INT files for re-run
if delete_INT                                   % check if delete INT flag is set
    temp    = dir([path, 'Loads\INT\*.int']);   % get list of INT files in folder
    for i = 1:length(temp)                      % start looping on files in INT folder
        for j = 1:length(DLC)                   % start looping on strings in DLC input
            if length(DLC{j}) > length(temp(i).name)                % check if length of string specifying DLC is longer than DLC name (do nothing if it is)
            elseif strcmp(DLC{j}, temp(i).name(1:length(DLC{j})))   % compare string specifying DLC to file name
                delete([[path, 'Loads\INT\'], temp(i).name]);       % delete file if they match
            end
        end
    end
end
end

%% Function for checking if a DLC is in a cell-array list of DLC's
function tf = DLC_in_list(tline, DLC)
    
    % Loop over cell elements in cell array and find out whether they match
    res = zeros(length(DLC), 1);    % create array for storing results of each comparison (i.e. with each string in DLC)
    for i = 1:length(DLC)           % start looping on strings in DLC
        if length(tline) > length(DLC{i, 1})
            res(i) = strcmpi(tline(1:length(DLC{i, 1})), DLC{i, 1});    % compare tline and string in DLC
        end
    end
    if sum(res) == 0                % check if all elements are zero (i.e. no match)
        tf = 0;                     % set output to 0
    else
        tf = 1;                     % else, set output to 1
    end
end